> 进程生存环境
PCB
进程环境变量
内核空间
用户空间

> 进程原语
#fork
创建子进程
读时共享，写时复制

#exec
替换执行代码

l: 命令行参数列表(list)
p: 搜索file时使用path变量(path)
v: 使用命令行参数数组(argv)
e: 使用环境变量数组，不使用进程原有的环境变量，设置新加载程序运行的环境变量

#wait/waitpid
-- ps ajx 可以查看到父子进程的归属关系
-- ps ef 可以查看进程详细信息
```
#include <sys/types.h>
#include <sys/wait.h>

pit_t wait(int *status);
pid_t waitpid(pid_t pid, int *status, int options);
    pid：
        <-1 回收指定进程组内任意子进程
        -1  回收任意子进程
        0   回收和当前调用waitpid一个组的所有子进程
        >0  回收指定子进程
    options:
        WNOHANG 不挂起
```
僵尸进程

孤儿进程

一个进程在终止时会关闭所有文件描述符，释放用户空间分配的内存，但内核空间的PCB还保留着，内核在其中保存了一些信息：如果是正常终止则保存着退出状态，如果是异常终止则保存着导致该进程终止的信号是哪个。这个进程的父进程可以调用wait/waitpid获取这些信息，然后彻底清除这个进程。我们可以知道一个进程的退出状态可以在sheel中使用[$?]查看，因为sheel是父进程，当它终止时shell调用wait/waitpid得到它的退出状态并彻底清除这个进程。

如果一个进程已终止，但是它的父进程尚未调用wait/waitpid对它进行清理，这时的进程称为僵尸(zombie)进程。任何进程在刚终止时都是僵尸进程，正常情况下，僵尸进程都立刻被父进程清理，为了观察到僵尸进程，我们自己写了一个不正常的程序，父进程fork出子进程，子进程终止，而父进程既不终止也不调用wait/waitpid清理子进程。